Difference B/w HTTP1 and HTTP2 
HTTP1:
- It supports connection reuse i.e. 
for every TCP connection there could be multiple requests and responses, and pipelining where the client can request several resources from the server at once.
 However, pipelining was hard to implement due to issues such as head-of-line blocking and was not a feasible solution

Web Traffic: HTTP/1 provides faster delivery of web pages and reduces web traffic as compared to HTTP/1.0. 
However, TCP starts slowly and with domain sharding (resources can be downloaded simultaneously by using multiple domains),
 connection reuse and pipelining, there is an increased risk of network congestion
status code: Introduces a warning header field to carry additional information about the status of a message. Can define 24 status codes, error reporting is quicker and more efficient.
Authentication Mechanism: It is relatively secure since it uses digest authentication, NTLM authentication.
Caching : Expands on the caching support by using additional headers like cache-control, conditional headers like If-Match and by using entity tags.
HTTP2:
Uses multiplexing, where over a single TCP connection resources to be delivered are interleaved and arrive at the client almost at the same time
 It is done using streams which can be prioritized, can have dependencies and individual flow control. 
 It also provides a feature called server push that allows the server to send data that the client will need but has not yet requested.
 Web Traffic: HTTP/2 utilizes multiplexing and server push to effectively reduce the page load time by a greater margin along with being less sensitive to network delays.
status code: Underlying semantics of HTTP such as headers, status codes remains the same.
Authentication Mechanism: Security concerns from previous versions will continue to be seen in HTTP/2. However, it is better equipped to deal with them due to new TLS features like connection error of type Inadequate_Security
Caching : HTTP/2 does not change much in terms of caching. With the server push feature if the client finds the resources are already present in the cache, it can cancel the pushed stream. 

Objects:
An object is a collection of properties, and a property is an association between a name (or key) and a value.
The key of a property can be a string. And the value of a property can be any value.
Syntax for Object:
let object_name = {
    key_name : value,
    ...
}
